INFORME PRÁCTICA 4 DE ALGORITMOS
Sergio Piñeiro (sergio.pineiro) e Ismael Verde (ismael.verdec)
Grupo 2.1

La práctica consiste en implementar en C el algoritmo de Dijkstra.
Dicho algoritmo calcula el camino mínimo de cada vértice a los 
restantes en un grafo ponderado. Tras implementar el código, se
deberá poner a prueba en unos grafos dados para testear. Por último,
se calculará empíricamente la complejidad computacional del algoritmo
mediante una medición de tiempos.

El algoritmo implementado compila y funciona sin problema, dando
los resultados esperados según el test con los grafos dados.

En esta práctica los tiempos fueron medidos en un portatil Msi gv62 7re,
con un procesador de 64 bits i7-7700HQ, trabando a 2.80 GHz con una RAM
de 16 GB. El sistema operativo es Ubuntu 19.04.

Los tiempos del algoritmo de dijkstra, medidos en microsegundos,
fueron los siguientes:

(n = tamaño del vector , t = tiempo de ejecución, cti = cota inferior, 
cta = cota ajustada, cts = cota superior)

Medición de dijkstra con inicialización de matrices aleatoria:

     n           t(n)       t(n)/n^2.6       t(n)/n^2.83        t(n)/n^3.1
     10        12.935*        0.032491         0.019132         0.010275
     20        94.624*        0.039203         0.019683         0.008766
     40       661.000         0.045170         0.019336         0.007142
     80      4675.000         0.052692         0.019233         0.005891
    160     33299.000         0.061904         0.019265         0.004894
    320    241398.000         0.074019         0.019641         0.004138
    640   1969100.000         0.099586         0.022531         0.003936     #


cti: 2.6
cta: 2.83
cts: 3.1

Los tiempos se encuentran constantes entre 0.0191 y 0.0197, salvo el último,
marcado con una #, que está por encima de lo esperado, siendo considerada una
anomalía.

(los tiempos marcados con un asterisco*, son aquellos inferiores a 500.
Estos fueron calculados por número medio de iteraciones, siendo este 
de k=1000.)

En conclusión, el algoritmo de dijkstra da lugar a tiempos que suben
en gran medida al aumentar el número de elementos de la matriz. Por otro lado,
la complejidad del algoritmo es muy alta debido los varios bucles que contiene.
